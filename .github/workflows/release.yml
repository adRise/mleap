name: Release

on:
  workflow_dispatch:
    inputs:
      TUBI_PROJECT_NAME:
        description: 'project name'
        required: true
      TUBI_IMAGE_NAME:
        description: 'optional image name if not equal to project name'
        required: false
      # todo remove when every app is on release-drafter and delete our custom inquireVersion
      TUBI_PROJECT_VERSION:
        description: 'semantic version part to bump, either patch, minor or major'
        required: true
        default: 'patch'
  release:
    types:
      - published

# can maybe test via https://github.com/nektos/act
# act -s DOCKER_USERNAME=abc -s DOCKER_PASSWORD=xyz --container-architecture linux/arm64 -W .github/workflows/release.yml release
jobs:
  pre-check:
    runs-on: [ self-hosted ]
    steps:
      - name: Check build info
        run: |
          echo "running on branch ${{ github.ref }}"
          TUBI_PROJECT_NAME="${{ github.event.inputs.TUBI_PROJECT_NAME }}"
          TUBI_IMAGE_NAME="${{ github.event.inputs.TUBI_IMAGE_NAME }}"

          # Convert TUBI_PROJECT_NAME to an array
          IFS=' ' read -r -a project_names <<< "$TUBI_PROJECT_NAME"

          # Check if TUBI_IMAGE_NAME is not empty and TUBI_PROJECT_NAME contains multiple project names
          if [ -n "$TUBI_IMAGE_NAME" ] && [ "${#project_names[@]}" -gt 1 ]; then
            echo "Error: image name is set but there are multiple project names: $TUBI_PROJECT_NAME"
            exit 1
          fi
          if [ ${{ github.ref }} == 'refs/heads/master' ]; then
            if [ -z "${{ github.event.inputs.TUBI_IMAGE_NAME }}" ] && ( [ ${{ github.event.inputs.TUBI_PROJECT_NAME }} == 'predictor' ] || [ ${{ github.event.inputs.TUBI_PROJECT_NAME }} == 'recommender-registry' ] ); then
              echo "predictor and recommender-registry must be built together for master, please use predictor-matrix-release workflow instead"
              exit 1
            fi
          fi
  release:
    needs: pre-check
    runs-on: [ self-hosted, production, large ]
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Set build info
        id: build_info
        run: |
          if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
            echo "tubi-project-name=${{ github.event.inputs.TUBI_PROJECT_NAME }}" >> "$GITHUB_OUTPUT"
            echo "tubi-image-name=${{ github.event.inputs.TUBI_IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
            echo "tubi-project-version=${{ github.event.inputs.TUBI_PROJECT_VERSION }}" >> "$GITHUB_OUTPUT"
          else
            tag="${{ github.event.release.tag_name }}"
            name="${tag%-v[0-9]*\.[0-9]*\.[0-9]*}"
            if [ $name == 'analytics-ingestion_v3' ]; then
              name='analytics-ingestion-v3'
            fi
            echo "tubi-project-name=${name}" >> "$GITHUB_OUTPUT"
            echo "tubi-project-version=${tag##[a-z]*-v}" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure git user to push
        run: |
          git config --global user.email "sbt@tubi.tv"
          git config --global user.name "sbt"

      - name: Clone and checkout to current branch
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0

      - name: Install dependencies for faiss
        if: steps.build_info.outputs.tubi-project-name == 'vector-store'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenblas-base

      - name: Set up JDK 11 # it auto caches https://github.com/actions/setup-java#caching-packages-dependencies
        uses: actions/setup-java@v4.5.0
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'sbt'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: "us-east-2"

      - name: Get Sbt Global Settings
        uses: adRise/sbt-global-settings@v0.2.3

      # can simply check github.event.release.tag_name to decide if else, no need for the Dockerfile check on dockerServiceV2
      - name: Generate artifact
        run: |
          if [ -f ${{ steps.build_info.outputs.tubi-project-name }}/Dockerfile ]; then
            ./scripts/github-action/release.sh
          elif [ -n ${{ steps.build_info.outputs.tubi-project-version }} ]; then
            sbt -v "project ${{ steps.build_info.outputs.tubi-project-name }}" "release release-version ${{ steps.build_info.outputs.tubi-project-version }} with-defaults"
          else
            sbt -v "project ${{ steps.build_info.outputs.tubi-project-name }}" "release with-defaults"
          fi
        env:
          AKKA_TEST_FACTOR: 10.0
          JAVA_OPTS: -Xms4G -Xmx4G -Xss8M -XX:ReservedCodeCacheSize=256M -XX:+UseG1GC -Dfile.encoding=UTF-8
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          AWS_ECR_URL: ${{ steps.login-ecr.outputs.registry }}
          # not needed if your project is using dockerServiceV2
          TUBI_PROJECT_NAME: ${{ steps.build_info.outputs.tubi-project-name }}
          TUBI_IMAGE_NAME: ${{ steps.build_info.outputs.tubi-image-name }}
          TUBI_PROJECT_VERSION: ${{ steps.build_info.outputs.tubi-project-version }}

      - name: notify build status
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: ${{ github.event.repository.name }}-cicd
          # For posting a simple plain text message, no md just for link shortening
          slack-message: "${{ steps.build_info.outputs.tubi-project-name }}-v${{ steps.build_info.outputs.tubi-project-version }} release ${{ job.status }}: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BUILD_NOTIFY_SLACK_APP_TOKEN }}
